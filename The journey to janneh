```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import { Audio } from 'expo-av';

// Sample data structure for one Surah with ayahs, translations, and transliterations
const sampleSurah = [
  {
    ayahNumber: 1,
    arabicText: "بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ",
    translation: "In the name of Allah, the Most Gracious, the Most Merciful",
    transliteration: "Bismillah ir-Rahman ir-Rahim",
  },
  {
    ayahNumber: 2,
    arabicText: "الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ",
    translation: "All praise is due to Allah, Lord of the worlds",
    transliteration: "Alhamdu lillahi rabbil 'alamin",
  },
  // Add full Surah data here or load dynamically
];

const reciters = [
  {
    name: "Mishary Rashid",
    audioUrl: "https://server-url/audio/mishary1.mp3",
  },
  {
    name: "Abdul Basit",
    audioUrl: "https://server-url/audio/abdulbasit1.mp3",
  },
];

export default function QuranModule() {
  const [playing, setPlaying] = useState(false);
  const [sound, setSound] = useState(null);
  const [selectedReciter, setSelectedReciter] = useState(reciters[0]);

  useEffect(() => {
    return sound
      ? () => {
          sound.unloadAsync();
        }
: undefined;
  }, [sound]);

  async function playAudio() {
    if (sound) {
      await sound.stopAsync();
      setPlaying(false);
      setSound(null);
      return;
    }
    const { sound: newSound } = await Audio.Sound.createAsync(
      { uri: selectedReciter.audioUrl },
      { shouldPlay: true }
    );
    setSound(newSound);
    setPlaying(true);

    newSound.setOnPlaybackStatusUpdate((status) => {
      if (!status.isPlaying) {
        setPlaying(false);
        setSound(null);
      }
    });
  }

  function renderAyah({ item }) {
    return (
      <View style={styles.ayahContainer}>
        <Text style={styles.arabicText}>{item.arabicText} ({item.ayahNumber})</Text>
        <Text style={styles.transliterationText}>{item.transliteration}</Text>
        <Text style={styles.translationText}>{item.translation}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Qur'an Viewer</Text>

      <FlatList
        data={sampleSurah}
        keyExtractor={(item) => item.ayahNumber.toString()}
        renderItem={renderAyah}
        contentContainerStyle={{ paddingBottom: 20 }}
      />

      <View style={styles.reciterContainer}>
        {reciters.map((reciter) => (
          <TouchableOpacity key={reciter.name}
            style={[
              styles.reciterButton,
              reciter.name === selectedReciter.name && styles.reciterSelected,
            ]}
            onPress={() => setSelectedReciter(reciter)}
          >
            <Text style={styles.reciterText}>{reciter.name}</Text>
          </TouchableOpacity>
        ))}
      </View>

      <TouchableOpacity onPress={playAudio} style={styles.playButton}>
        <Text style={styles.playButtonText}>{playing ? "Stop Audio" : "Play Audio"}</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 15, backgroundColor: '#f9f9f9' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 10, color: '#0a5f3c', textAlign: 'center' },
  ayahContainer: { marginBottom: 20, borderBottomWidth: 1, borderBottomColor: '#ccc', paddingBottom: 10 },
  arabicText: { fontSize: 24, fontWeight: 'bold', textAlign: 'right', color: '#000' },
  transliterationText: { fontSize: 16, fontStyle: 'italic', color: '#555', marginTop: 4 },
  translationText: { fontSize: 16, color: '#333', marginTop: 4 },
  reciterContainer: { flexDirection: 'row', justifyContent: 'center', marginVertical: 15 }, reciterButton: { padding: 10, marginHorizontal: 8, borderRadius: 8, backgroundColor: '#d3e4cd' },
  reciterSelected: { backgroundColor: '#0a5f3c' },
  reciterText: { color: '#0a5f3c', fontWeight: 'bold' },
  playButton: { backgroundColor: '#0a5f3c', padding: 15, borderRadius: 10, alignItems: 'center' },
  playButtonText: { color: '#fff', fontSize: 18, fontWeight: 'bold' },
});
```
```javascript
import React, { useState } from 'react';
import { View, Text, FlatList, TextInput, StyleSheet, TouchableOpacity } from 'react-native';

// Sample hadith data
const hadiths = [
  {
    id: '1',
    book: 'Sahih Bukhari',
    arabic: "إِنَّمَا الأَعْمَالُ بِالنِّيَّاتِ",
    translation: "Actions are judged by intentions.",
  },
  {
    id: '2',
    book: 'Sahih Muslim',
    arabic: "الدِّينُ النَّصِيحَةُ",
    translation: "Religion is sincere advice.",
  },
];

// Sample tafsir data (simplified)
const tafsir = {
  ayahNumber: 1,
  text: "This verse means to start all actions with the name of Allah, seeking His blessings.",
};

export default function HadithTafsir() {
  const [search, setSearch] = useState('');
  const [selectedHadith, setSelectedHadith] = useState(null);

  const filteredHadiths = hadiths.filter(h =>
    h.arabic.includes(search) ||
    h.translation.toLowerCase().includes(search.toLowerCase()) ||
    h.book.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <View style={styles.container}> <Text style={styles.heading}>Hadith Collection</Text>
      <TextInput
        style={styles.searchInput}
        placeholder="Search Hadith..."
        value={search}
        onChangeText={setSearch}
      />

      <FlatList
        data={filteredHadiths}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={styles.hadithItem}
            onPress={() => setSelectedHadith(item)}
          >
            <Text style={styles.hadithBook}>{item.book}</Text>
            <Text style={styles.hadithArabic}>{item.arabic}</Text>
            <Text style={styles.hadithTranslation}>{item.translation}</Text>
          </TouchableOpacity>
        )}
      />

      {selectedHadith && (
        <View style={styles.tafsirContainer}>
          <Text style={styles.tafsirHeading}>Tafsir for Ayah {tafsir.ayahNumber}</Text>
          <Text style={styles.tafsirText}>{tafsir.text}</Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 15, backgroundColor: '#f0f8f0' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 10, color: '#0a5f3c' },
  searchInput: {
    backgroundColor: '#fff',
    borderColor: '#0a5f3c',
    borderWidth: 1,
    borderRadius: 8, padding: 10,
    marginBottom: 15,
  },
  hadithItem: {
    backgroundColor: '#dcedd7',
    padding: 15,
    borderRadius: 8,
    marginBottom: 12,
  },
  hadithBook: { fontWeight: 'bold', color: '#0a5f3c', marginBottom: 5 },
  hadithArabic: { fontSize: 18, fontWeight: 'bold', textAlign: 'right', color: '#000' },
  hadithTranslation: { fontSize: 16, fontStyle: 'italic', marginTop: 5, color: '#333' },
  tafsirContainer: {
    marginTop: 20,
    padding: 15,
    backgroundColor: '#b7d7b7',
    borderRadius: 10,
  },
  tafsirHeading: { fontWeight: 'bold', fontSize: 18, marginBottom: 8, color: '#0a5f3c' },
  tafsirText: { fontSize: 16, color: '#0a5f3c' },
});
```

```javascript
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator } from 'react-native';
import * as Location from 'expo-location';
import PrayerTimes from 'adhan'; // npm install adhan

export default function PrayerTimesScreen() {
  const [location, setLocation] = useState(null);
  const [prayerTimes, setPrayerTimes] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied.');
        return;
      }
      let loc = await Location.getCurrentPositionAsync({});
      setLocation(loc.coords);
    })();
  }, []);

  useEffect(() => {
    if (location) {
      const { latitude, longitude } = location;
      const date = new Date();
      const params = PrayerTimes.CalculationMethod.MuslimWorldLeague();
      const coordinates = new PrayerTimes.Coordinates(latitude, longitude);

```javascript
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, Alert } from 'react-native';
import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import { Magnetometer } from 'expo-sensors';
import PrayerTimes from 'adhan';

export default function PrayerTimesQibla() {
  const [location, setLocation] = useState(null);
  const [prayerTimes, setPrayerTimes] = useState(null);
  const [heading, setHeading] = useState(0);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Location permission denied');
        return;
      }
      let loc = await Location.getCurrentPositionAsync({});
      setLocation(loc.coords);
      await scheduleAzanNotifications(loc.coords);
    })();

    const subscription = Magnetometer.addListener(({ headingMagneticNorth }) => {
      setHeading(headingMagneticNorth);
    });

    Magnetometer.setUpdateInterval(1000);
    return () => subscription.remove();
  }, []);

  useEffect(() => {
    if (location) { const lat2 = (kaabaLat * const { latitude, longitude } = location;
      const date = new Date();
      const params = PrayerTimes.CalculationMethod.MuslimWorldLeague();
      const coordinates = new PrayerTimes.Coordinates(latitude, longitude);
      const times = new PrayerTimes(coordinates, date, params);
      setPrayerTimes(times);
    }
  }, [location]);

  async function scheduleAzanNotifications(coords) {
    const date = new Date();
    const params = PrayerTimes.CalculationMethod.MuslimWorldLeague();
    const coordinates = new PrayerTimes.Coordinates(coords.latitude, coords.longitude);
    const times = new PrayerTimes(coordinates, date, params);

    for (const prayer of ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha']) {
      const time = times[prayer];
      if (time > new Date()) {
        await Notifications.scheduleNotificationAsync({
          content: {
            title: 'Prayer Time',
            body: `${prayer.charAt(0).toUpperCase() + prayer.slice(1)} time is now.`,
          },
          trigger: time,
        });
      }
    }
  }

  function calculateQiblaAngle() {
    if (!location) return 0;
    const kaabaLat = 21.4225;
    const kaabaLng = 39.8262;

    const lat1 = (location.latitude * Math.PI) / 180;
    const lon1 = (location.longitude * Math.PI) / 180; Math.PI) / 180;
    const lon2 = (kaabaLng * Math.PI) / 180;

    const deltaLon = lon2 - lon1;
    const x = Math.sin(deltaLon);
    const y = Math.cos(lat1) * Math.tan(lat2) - Math.sin(lat1) * Math.cos(deltaLon);
    let brng = Math.atan2(x, y);
    brng = (brng * 180) / Math.PI;
    return (brng + 360) % 360;
  }

  if (errorMsg) {
    return (
      <View style={styles.container}>
        <Text style={styles.error}>{errorMsg}</Text>
      </View>
    );
  }

  if (!prayerTimes) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#0a5f3c" />
        <Text>Loading Prayer Times...</Text>
      </View>
    );
  }

  const qibla = calculateQiblaAngle();
  const deviceHeading = heading || 0;
  const rotation = qibla - deviceHeading;

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Prayer Times</Text>
      <Text>Fajr: {prayerTimes.fajr.toLocaleTimeString()}</Text>
      <Text>Dhuhr: {prayerTimes.dhuhr.toLocaleTimeString()}</Text>
      <Text>Asr: {prayerTimes.asr.toLocaleTimeString()}</Text>
      <Text>Maghrib: {prayerTimes.maghrib.toLocaleTimeString()}</Text>
      <Text>Isha: {prayerTimes.isha.toLocaleTimeString()}</Text>

      <View style={styles.compassContainer}> <Text style=styles.heading>Qibla Direction</Text>
        <View style=[styles.arrow,  transform: [ rotate: `{rotation}deg` }] }]} />
        <Text>Rotate your device to point to the arrow</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, justifyContent: 'center', alignItems: 'center', backgroundColor: '#e5f2e5' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  error: { color: 'red', fontSize: 18, textAlign: 'center' },
  compassContainer: { marginTop: 30, alignItems: 'center' },
  arrow: {
    width: 0,
    height: 0,
    borderLeftWidth: 25,
    borderRightWidth: 25,
    borderBottomWidth: 50,
    borderLeftColor: 'transparent',
    borderRightColor: 'transparent',
    borderBottomColor: '#0a5f3c',
    marginBottom: 10,
  },
});
```
```javascript
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Button, ScrollView } from 'react-native';
import * as Notifications from 'expo-notifications';

const dailyData = {
  ayah: "Indeed, with hardship comes ease. (Qur'an 94:6)",
  hadith: "The strong believer is better and more beloved to Allah than the weak believer. (Sahih Muslim)",
  quote: "Trust in Allah, but tie your camel.",
};

export default function DailyReminders() {
  const [content, setContent] = useState(dailyData);

  useEffect(() => {
    scheduleDailyNotification();
  }, []);

  async function scheduleDailyNotification() {
    await Notifications.cancelAllScheduledNotificationsAsync();

    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'Daily Islamic Reminder',
        body: `dailyData.ayah{dailyData.hadith}\n${dailyData.quote}`,
      },
      trigger: { hour: 8, minute: 0, repeats: true }, // every day at 8 AM
    });
  }

  return (
    <ScrollView contentContainerStyle={styles.container}> <Text style=styles.heading>Qibla Direction</Text>
        <View style=[styles.arrow,  transform: [ rotate: `{rotation}deg` }] }]} />
        <Text>Rotate your device to point to the arrow</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, justifyContent: 'center', alignItems: 'center', backgroundColor: '#e5f2e5' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  error: { color: 'red', fontSize: 18, textAlign: 'center' },
  compassContainer: { marginTop: 30, alignItems: 'center' },
  arrow: {
    width: 0,
    height: 0,
    borderLeftWidth: 25,
    borderRightWidth: 25,
    borderBottomWidth: 50,
    borderLeftColor: 'transparent',
    borderRightColor: 'transparent',
    borderBottomColor: '#0a5f3c',
    marginBottom: 10,
  },
});
```
```javascript
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Button, ScrollView } from 'react-native';
import * as Notifications from 'expo-notifications';

const dailyData = {
  ayah: "Indeed, with hardship comes ease. (Qur'an 94:6)",
  hadith: "The strong believer is better and more beloved to Allah than the weak believer. (Sahih Muslim)",
  quote: "Trust in Allah, but tie your camel.",
};

export default function DailyReminders() {
  const [content, setContent] = useState(dailyData);

  useEffect(() => {
    scheduleDailyNotification();
  }, []);

  async function scheduleDailyNotification() {
    await Notifications.cancelAllScheduledNotificationsAsync();

    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'Daily Islamic Reminder',
        body: `dailyData.ayah{dailyData.hadith}\n${dailyData.quote}`,
      },
      trigger: { hour: 8, minute: 0, repeats: true }, // every day at 8 AM
    });
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>

<Text style={styles.heading}>Ayah of the Day</Text>
      <Text style={styles.text}>{content.ayah}</Text>

      <Text style={styles.heading}>Hadith of the Day</Text>
      <Text style={styles.text}>{content.hadith}</Text>

      <Text style={styles.heading}>Motivational Quote</Text>
      <Text style={styles.text}>{content.quote}</Text>

      <Button title="Reschedule Notification" onPress={scheduleDailyNotification} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, backgroundColor: '#f0f8f0', flexGrow: 1 },
  heading: { fontSize: 20, fontWeight: 'bold', marginTop: 20, color: '#0a5f3c' },
  text: { fontSize: 16, marginTop: 10, color: '#333' },
});
```

```javascript
import React, { useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, Button, StyleSheet, Clipboard, Alert } from 'react-native';

const duas = [
  { id: '1', category: 'Morning', text: 'اللّهـمّ بك أصبحنا...' },
  { id: '2', category: 'Travel', text: 'اللّهـمّ أنت الصّاحب...' },
  { id: '3', category: 'Night', text: 'باسمك اللّهـمّ أموت...' },
];

const categories = ['Morning', 'Travel', 'Night'];

export default function DuaTasbeeh() { const [selectedCategory, setSelectedCategory] = useState('Morning');
  const [counter, setCounter] = useState(0);

  const filteredDuas = duas.filter(d => d.category === selectedCategory);

  const incrementCounter = () => setCounter(prev => prev + 1);
  const resetCounter = () => setCounter(0);

  const copyToClipboard = (text) => {
    Clipboard.setString(text);
    Alert.alert('Copied!', 'Dua text copied to clipboard.');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Dua Bank</Text>
      <View style={styles.categories}>
        {categories.map(cat => (
          <TouchableOpacity key={cat}
            style={[styles.categoryBtn, selectedCategory === cat && styles.selectedCategory]}
            onPress={() => setSelectedCategory(cat)}
          >
            <Text style={styles.categoryText}>{cat}</Text>
          </TouchableOpacity>
        ))}
      </View>

      <FlatList
        data={filteredDuas}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => copyToClipboard(item.text)} style={styles.duaItem}>
            <Text style={styles.duaText}>{item.text}</Text>
          </TouchableOpacity>
        )}
      />

      <View style={styles.tasbeehContainer}>
        <Text style={styles.heading}>Tasbeeh Counter</Text>
        <Text style={styles.counterText}>{counter}</Text>
        <View style={styles.buttons}>
          <Button title="Count" onPress={incrementCounter} color="#0a5f3c" />
          <Button title="Reset" onPress={resetCounter} color="#d9534f" />
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  categories: { flexDirection: 'row', marginBottom: 15 },
  categoryBtn: {
    flex: 1, padding: 10,
    marginHorizontal: 5,
    backgroundColor: '#c7e1c7',
    borderRadius: 8,
    alignItems: 'center',
  },
  selectedCategory: { backgroundColor: '#0a5f3c' },
  categoryText: { color: '#fff', fontWeight: 'bold' },
  duaItem: {
    padding: 15,
    backgroundColor: '#dcedd7',
    borderRadius: 8,
    marginVertical: 7,
  },
  duaText: { fontSize: 16, color: '#000' },
  tasbeehContainer: { marginTop: 30, alignItems: 'center' },
  counterText: { fontSize: 48, marginVertical: 10, color: '#0a5f3c', fontWeight: 'bold' },
  buttons: { flexDirection: 'row', width: '60%', justifyContent: 'space-around' },
});
```
```javascript
import React, { useState } from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import { Calendar } from 'react-native-calendars';

export default function PrayerCalendar() {
  const [markedDates, setMarkedDates] = useState({
    '2025-07-25': { marked: true, dotColor: 'green' },
    '2025-07-24': { marked: true, dotColor: 'red' }, // missed
  });

  const onDayPress = (day) => {
    const date = day.dateString;
    const isMarked = markedDates[date]?.marked;

    if (isMarked) {
      Alert.alert('Prayer logged', `You have already logged prayer for date`);
      return;
    

    setMarkedDates((prev) => (
      ...prev,
      [date]:  marked: true, dotColor: 'green' ,
    ));

    Alert.alert('Success', `Prayer logged for{date}`);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Prayer Calendar</Text>
      <Calendar
        onDayPress={onDayPress}
        markedDates={markedDates}
        markingType={'simple'}
        theme={{selectedDayBackgroundColor: '#0a5f3c',
          todayTextColor: '#0a5f3c',
          dotColor: '#0a5f3c',
          arrowColor: '#0a5f3c',
        }}
      />
      <Text style={styles.info}>Tap on a day to log your prayer.</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  info: { marginTop: 15, fontSize: 16, color: '#333', textAlign: 'center' },
});
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, FlatList, Alert, StyleSheet, TouchableOpacity } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function SinRepentTracker() {
  const [entry, setEntry] = useState('');
  const [entries, setEntries] = useState([]);

  useEffect(() => {
    loadEntries();
  }, []);

  const loadEntries = async () => {
    try {
      const saved = await AsyncStorage.getItem('sinEntries');
      if (saved) setEntries(JSON.parse(saved));
    } catch (e) {
      Alert.alert('Error', 'Failed to load entries.');
    }
  };

  const saveEntries = async (newEntries) => {
    try {
      await AsyncStorage.setItem('sinEntries', JSON.stringify(newEntries));
    } catch {
      Alert.alert('Error', 'Failed to save entries.');
    }
  };

  const addEntry = () => {
    if (!entry.trim()) return Alert.alert('Error', 'Entry cannot be empty.'); const newEntries = [{ id: Date.now().toString(), text: entry.trim() }, ...entries];
    setEntries(newEntries);
    saveEntries(newEntries);
    setEntry('');
  };

  const deleteEntry = (id) => {
    const filtered = entries.filter(e => e.id !== id);
    setEntries(filtered);
    saveEntries(filtered);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Sin & Repentance Tracker</Text>
      <TextInput
        style={styles.input}
        placeholder="Write your sin or repentance note"
        value={entry}
        onChangeText={setEntry}
        multiline
      />
      <Button title="Add Entry" onPress={addEntry} color="#0a5f3c" />
      <FlatList
        data={entries}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <View style={styles.entry}>
            <Text style={styles.entryText}>{item.text}</Text>
            <TouchableOpacity onPress={() => deleteEntry(item.id)}>
              <Text style={styles.delete}>Delete</Text>
            </TouchableOpacity>
          </View>
        )}
        ListEmptyComponent={<Text style={styles.noEntries}>No entries yet.</Text>}
        style={{ marginTop: 20 }}
      />
      <View style={styles.duaPrompt}> <Text style={styles.duaTitle}>Dua for Forgiveness:</Text>
        <Text style={styles.duaText}>"Astaghfirullah Rabbi min kulli dhambin wa atubu ilayh."</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e9f1e9' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  input: {
    borderColor: '#0a5f3c',
    borderWidth: 1,
    borderRadius: 8,
    padding: 10,
    height: 80,
    backgroundColor: '#fff',
    textAlignVertical: 'top',
    marginBottom: 10,
  },
  entry: {
    backgroundColor: '#d3e4d3',
    padding: 12,
    borderRadius: 8,
    marginBottom: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  entryText: { flex: 1, fontSize: 16, color: '#000' },
  delete: { color: '#d9534f', fontWeight: 'bold', marginLeft: 10 },
  noEntries: { textAlign: 'center', marginTop: 20, fontSize: 16, color: '#555' },
  duaPrompt: { marginTop: 30, padding: 15, backgroundColor: '#c7dfc7', borderRadius: 10 },
  duaTitle: { fontWeight: 'bold', fontSize: 18, marginBottom: 5, color: '#0a5f3c' },
  duaText: { fontSize: 16, fontStyle: 'italic', color: '#333' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Modal, ScrollView, Button } from 'react-native';

const books = [
  { id: '1', title: 'Riyadh us-Saliheen', description: 'A compilation of authentic hadiths by Imam Nawawi.', content: 'Full text of Riyadh us-Saliheen...' },
  { id: '2', title: 'The Sealed Nectar', description: 'Biography of the Prophet Muhammad (PBUH).', content: 'Full text of The Sealed Nectar...' },
  { id: '3', title: 'Purification of the Heart', description: 'A book on Tazkiyah (spiritual purification).', content: 'Full text of Purification of the Heart...' },
];

export default function BookLibrary() {
  const [selectedBook, setSelectedBook] = useState(null);

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Book Library</Text>
      <FlatList
        data={books}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (<TouchableOpacity style={styles.bookItem} onPress={() => setSelectedBook(item)}>
            <Text style={styles.bookTitle}>{item.title}</Text>
            <Text style={styles.bookDesc}>{item.description}</Text>
          </TouchableOpacity>
        )}
      />

      <Modal visible={!!selectedBook} animationType="slide">
        <View style={styles.modalContainer}>
          <Button title="Close" onPress={() => setSelectedBook(null)} />
          <ScrollView style={styles.bookContent}>
            <Text style={styles.bookTitle}>{selectedBook?.title}</Text>
            <Text style={styles.bookText}>{selectedBook?.content}</Text>
          </ScrollView>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  bookItem: { backgroundColor: '#dcedd7', padding: 15, borderRadius: 8, marginBottom: 10 },
  bookTitle: { fontSize: 18, fontWeight: 'bold', color: '#0a5f3c' },
  bookDesc: { marginTop: 5, fontSize: 14, color: '#333' },
  modalContainer: { flex: 1, padding: 15, backgroundColor: '#fff' },
  bookContent: { marginTop: 15 },
  bookText: { fontSize: 16, color: '#000' },
});
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { Audio } from 'expo-av';

const quotes = [
  { id: '1', text: 'Trust in Allah but tie your camel.' , audio: require('./assets/audio1.mp3') },
  { id: '2', text: 'Patience is the key to relief.', audio: require('./assets/audio2.mp3') },
  { id: '3', text: 'Success is with faith and perseverance.', audio: require('./assets/audio3.mp3') },
];

export default function DailyMotivations() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [sound, setSound] = useState(null);

  useEffect(() => {
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [sound]);

  const playAudio = async () => {
    if (sound) {
      await sound.unloadAsync();
    }
    const { sound: newSound } = await Audio.Sound.createAsync(quotes[currentIndex].audio);
    setSound(newSound);
    await newSound.playAsync();
  }; const nextQuote = () => {
    setCurrentIndex((prev) => (prev + 1) % quotes.length);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Daily Motivation</Text>
      <Text style={styles.quoteText}>"{quotes[currentIndex].text}"</Text>
      <Button title="Play Audio" onPress={playAudio} color="#0a5f3c" />
      <Button title="Next Quote" onPress={nextQuote} color="#0a5f3c" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent: 'center', alignItems: 'center', padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  quoteText: { fontSize: 18, fontStyle: 'italic', textAlign: 'center', marginBottom: 20, color: '#000' },
});
```const nextQuote = () => {
    setCurrentIndex((prev) => (prev + 1) % quotes.length);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Daily Motivation</Text>
      <Text style={styles.quoteText}>"{quotes[currentIndex].text}"</Text>
      <Button title="Play Audio" onPress={playAudio} color="#0a5f3c" />
      <Button title="Next Quote" onPress={nextQuote} color="#0a5f3c" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent: 'center', alignItems: 'center', padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  quoteText: { fontSize: 18, fontStyle: 'italic', textAlign: 'center', marginBottom: 20, color: '#000' },
});
``
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Modal, ScrollView, Button } from 'react-native';
import { Audio } from 'expo-av';

const prophets = [
  { id: '1', name: 'Prophet Adam', story: 'Story of Prophet Adam...', audio: require('./assets/adam.mp3') },
  { id: '2', name: 'Prophet Noah', story: 'Story of Prophet Noah...', audio: require('./assets/noah.mp3') },
  { id: '3', name: 'Prophet Moses', story: 'Story of Prophet Moses...', audio: require('./assets/moses.mp3') },
];

export default function LifeOfProphets() {
  const [selectedProphet, setSelectedProphet] = useState(null);
  const [sound, setSound] = useState(null);

  useEffect(() => {
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [sound]);

  const playAudio = async () => {
    if (sound) {
      await sound.unloadAsync();
    }
    const { sound: newSound } = await Audio.Sound.createAsync(selectedProphet.audio);
    setSound(newSound); await newSound.playAsync();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Life of the Prophets</Text>
      <FlatList
        data={prophets}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity style={styles.item} onPress={() => setSelectedProphet(item)}>
            <Text style={styles.name}>{item.name}</Text>
          </TouchableOpacity>
        )}
      />

      <Modal visible={!!selectedProphet} animationType="slide">
        <View style={styles.modalContainer}>
          <Button title="Close" onPress={() => setSelectedProphet(null)} />
          <ScrollView style={styles.storyContainer}>
            <Text style={styles.name}>{selectedProphet?.name}</Text>
            <Text style={styles.story}>{selectedProphet?.story}</Text>
            <Button title="Play Audio" onPress={playAudio} color="#0a5f3c" />
          </ScrollView>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  item: { padding: 15, backgroundColor: '#dcedd7', borderRadius: 8, marginBottom: 10 }, name: { fontSize: 18, fontWeight: 'bold', color: '#0a5f3c' },
  modalContainer: { flex: 1, padding: 15, backgroundColor: '#fff' },
  storyContainer: { marginTop: 15 },
  story: { fontSize: 16, color: '#000', marginBottom: 20 },
});
```
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

const nasheeds = [
  { id: '1', title: 'Nasheed One', audio: require('./assets/nasheed1.mp3') },
  { id: '2', title: 'Nasheed Two', audio: require('./assets/nasheed2.mp3') },
  { id: '3', title: 'Nasheed Three', audio: require('./assets/nasheed3.mp3') },
];

export default function Nasheeds() {
  const [sound, setSound] = useState(null);
  const [playingId, setPlayingId] = useState(null);

  useEffect(() => {
    return () => {
      if (sound) sound.unloadAsync();
    };
  }, [sound]);

  const playNasheed = async (item) => {
    if (sound) {
      await sound.unloadAsync();
      if (playingId === item.id) {
        setSound(null);
        setPlayingId(null);
        return; // toggle pause
      }
    }
    const { sound: newSound } = await Audio.Sound.createAsync(item.audio);
    setSound(newSound);
    setPlayingId(item.id);
    await newSound.playAsync(); };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Halal Nasheeds</Text>
      <FlatList
        data={nasheeds}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity style={styles.item} onPress={() => playNasheed(item)}>
            <Text style={styles.title}>{item.title}</Text>
            <Text style={styles.status}>{playingId === item.id ? 'Playing' : 'Tap to Play'}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c' },
  item: { backgroundColor: '#dcedd7', padding: 15, borderRadius: 8, marginBottom: 10, flexDirection: 'row', justifyContent: 'space-between' },
  title: { fontSize: 18, color: '#0a5f3c' },
  status: { fontSize: 14, color: '#555', fontStyle: 'italic' },
});
```
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Button, Modal, ScrollView } from 'react-native';
import { Audio } from 'expo-av';

const lectures = [
  { id: '1', title: 'Fiqh Basics', category: 'Fiqh', audio: require('./assets/fiqh1.mp3') },
  { id: '2', title: 'Aqeedah Fundamentals', category: 'Aqeedah', audio: require('./assets/aqeedah1.mp3') },
  { id: '3', title: 'Tazkiyah and Purification', category: 'Tazkiyah', audio: require('./assets/tazkiyah1.mp3') },
];

const categories = ['All', 'Fiqh', 'Aqeedah', 'Tazkiyah'];

export default function Lectures() {
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [sound, setSound] = useState(null);
  const [playingId, setPlayingId] = useState(null);

  useEffect(() => {
    return () => {
      if (sound) sound.unloadAsync();
    };
  }, [sound]); const filteredLectures = selectedCategory === 'All' ? lectures : lectures.filter(l => l.category === selectedCategory);

  const playLecture = async (item) => {
    if (sound) {
      await sound.unloadAsync();
      if (playingId === item.id) {
        setSound(null);
        setPlayingId(null);
        return;
      }
    }
    const { sound: newSound } = await Audio.Sound.createAsync(item.audio);
    setSound(newSound);
    setPlayingId(item.id);
    await newSound.playAsync();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Lectures by Scholars</Text>
      <View style={styles.categories}>
        {categories.map(cat => (
          <TouchableOpacity key={cat} onPress={() => setSelectedCategory(cat)} style={[styles.catButton, selectedCategory === cat && styles.catSelected]}>
            <Text style={[styles.catText, selectedCategory === cat && styles.catTextSelected]}>{cat}</Text>
          </TouchableOpacity>
        ))}
      </View>
      <FlatList
        data={filteredLectures}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity style={styles.item} onPress={() => playLecture(item)}>
            <Text style={styles.title}>{item.title}</Text> <Text style={styles.status}>{playingId === item.id ? 'Playing' : 'Tap to Play'}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  categories: { flexDirection: 'row', marginBottom: 15, justifyContent: 'space-around' },
  catButton: { padding: 10, borderRadius: 20, backgroundColor: '#a7cda7' },
  catSelected: { backgroundColor: '#0a5f3c' },
  catText: { color: '#064b2d', fontWeight: 'bold' },
  catTextSelected: { color: '#fff' },
  item: { backgroundColor: '#dcedd7', padding: 15, borderRadius: 8, marginBottom: 10, flexDirection: 'row', justifyContent: 'space-between' },
  title: { fontSize: 18, color: '#0a5f3c' },
  status: { fontSize: 14, color: '#555', fontStyle: 'italic' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet, TouchableOpacity, Modal, ScrollView } from 'react-native';

export default function QASection() {
  const [questions, setQuestions] = useState([
    { id: '1', question: 'What is Islam?', answer: 'Islam is the submission to Allah.' },
  ]);
  const [newQuestion, setNewQuestion] = useState('');
  const [selectedQA, setSelectedQA] = useState(null);

  const submitQuestion = () => {
    if (newQuestion.trim() === '') return;
    const id = (questions.length + 1).toString();
    setQuestions([{ id, question: newQuestion, answer: 'Pending answer...' }, ...questions]);
    setNewQuestion('');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Ask a Question</Text>
      <TextInput
        style={styles.input}
        placeholder="Type your question here"
        value={newQuestion}
        onChangeText={setNewQuestion}
      /> <Button title="Submit Question" onPress={submitQuestion} color="#0a5f3c" />

      <Text style={[styles.heading, { marginTop: 20 }]}>Questions & Answers</Text>
      <FlatList
        data={questions}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => setSelectedQA(item)} style={styles.qaItem}>
            <Text style={styles.questionText}>{item.question}</Text>
          </TouchableOpacity>
        )}
      />

      <Modal visible={!!selectedQA} animationType="slide" onRequestClose={() => setSelectedQA(null)}>
        <View style={styles.modalContainer}>
          <Button title="Close" onPress={() => setSelectedQA(null)} />
          <ScrollView style={{ marginTop: 20 }}>
            <Text style={styles.questionText}>{selectedQA?.question}</Text>
            <Text style={styles.answerText}>{selectedQA?.answer}</Text>
          </ScrollView>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 22, fontWeight: 'bold', marginBottom: 10, color: '#0a5f3c' },
  input: { borderWidth: 1, borderColor: '#0a5f3c', borderRadius: 8, padding: 10, backgroundColor: '#fff', marginBottom: 10 }, qaItem: { backgroundColor: '#dcedd7', padding: 15, borderRadius: 8, marginBottom: 10 },
  questionText: { fontSize: 16, fontWeight: 'bold', color: '#0a5f3c' },
  answerText: { fontSize: 16, marginTop: 15, color: '#000' },
  modalContainer: { flex:1, padding: 20, backgroundColor: '#fff' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, ScrollView } from 'react-native';

export default function ZakatCalculator() {
  const [cash, setCash] = useState('');
  const [gold, setGold] = useState('');
  const [silver, setSilver] = useState('');
  const [debts, setDebts] = useState('');
  const [zakatDue, setZakatDue] = useState(null);

  // Nisab threshold example (values in grams for gold and silver)
  const nisabGold = 85; // grams
  const nisabSilver = 595; // grams

  const calculateZakat = () => {
    const cashVal = parseFloat(cash) || 0;
    const goldVal = parseFloat(gold) || 0;
    const silverVal = parseFloat(silver) || 0;
    const debtsVal = parseFloat(debts) || 0;

    // Simplified logic: total wealth = cash + (gold in grams * gold price) + (silver in grams * silver price) - debts
    // For demo, assume 1 gram gold = 60, silver =0.8
    const goldPrice = 60;
    const silverPrice = 0.8; const totalWealth = cashVal + (goldVal * goldPrice) + (silverVal * silverPrice) - debtsVal;

    // Check if wealth exceeds nisab (converted to cash value by gold nisab)
    const nisabValue = nisabGold * goldPrice;

    if (totalWealth >= nisabValue) {
      const zakat = totalWealth * 0.025; // 2.5%
      setZakatDue(zakat.toFixed(2));
    } else {
      setZakatDue('No Zakat due (below nisab)');
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.heading}>Zakat Calculator</Text>
      <TextInput
        style={styles.input}
        placeholder="Cash amount (e.g., 1000)"
        keyboardType="numeric"
        value={cash}
        onChangeText={setCash}
      />
      <TextInput
        style={styles.input}
        placeholder="Gold (grams)"
        keyboardType="numeric"
        value={gold}
        onChangeText={setGold}
      />
      <TextInput
        style={styles.input}
        placeholder="Silver (grams)"
        keyboardType="numeric"
        value={silver}
        onChangeText={setSilver}
      />
      <TextInput
        style={styles.input}
        placeholder="Debts to pay"
        keyboardType="numeric"
        value={debts}
        onChangeText={setDebts}
      /> <Button title="Calculate Zakat" onPress={calculateZakat} color="#0a5f3c" />
      {zakatDue !== null && (
        <Text style={styles.result}>Zakat Due: {zakatDue}</Text>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flexGrow:1, padding: 20, backgroundColor: '#e6f0e6', justifyContent: 'center' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c', textAlign: 'center' },
  input: { borderWidth: 1, borderColor: '#0a5f3c', borderRadius: 8, padding: 10, marginBottom: 15, backgroundColor: '#fff' },
  result: { fontSize: 20, marginTop: 20, fontWeight: 'bold', color: '#064b2d', textAlign: 'center' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, TextInput, FlatList, TouchableOpacity, StyleSheet } from 'react-native';

const items = [
  { id: '1', category: 'Food', type: 'Halal', name: 'Chicken', reference: 'Qur’an 5:3' },
  { id: '2', category: 'Food', type: 'Haram', name: 'Pork', reference: 'Qur’an 2:173' },
  { id: '3', category: 'Business', type: 'Halal', name: 'Fair Trade', reference: '' },
  { id: '4', category: 'Business', type: 'Haram', name: 'Riba (Interest)', reference: 'Qur’an 2:275' },
  { id: '5', category: 'Lifestyle', type: 'Halal', name: 'Charity', reference: 'Qur’an 2:271' },
  { id: '6', category: 'Lifestyle', type: 'Haram', name: 'Gambling', reference: 'Qur’an 5:90' },
];

const categories = ['All', 'Food', 'Business', 'Lifestyle'];

export default function HalalHaramGuide() {
  const [search, setSearch] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');

  const filteredItems = items.filter(item => {const matchCategory = selectedCategory === 'All' || item.category === selectedCategory;
    const matchSearch = item.name.toLowerCase().includes(search.toLowerCase());
    return matchCategory && matchSearch;
  });

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Halal & Haram Guide</Text>
      <TextInput
        style={styles.input}
        placeholder="Search items..."
        value={search}
        onChangeText={setSearch}
      />
      <View style={styles.categories}>
        {categories.map(cat => (
          <TouchableOpacity
            key={cat}
            style={[styles.catButton, selectedCategory === cat && styles.catSelected]}
            onPress={() => setSelectedCategory(cat)}
          >
            <Text style={[styles.catText, selectedCategory === cat && styles.catTextSelected]}>{cat}</Text>
          </TouchableOpacity>
        ))}
      </View>
      <FlatList
        data={filteredItems}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <View style={[styles.item, item.type === 'Halal' ? styles.halal : styles.haram]}>
            <Text style={styles.name}>{item.name} ({item.type})</Text>
            {item.reference ? <Text style={styles.ref}>Ref: {item.reference}</Text> : null} </View>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 10, color: '#0a5f3c' },
  input: { borderWidth: 1, borderColor: '#0a5f3c', borderRadius: 8, padding: 10, marginBottom: 10, backgroundColor: '#fff' },
  categories: { flexDirection: 'row', marginBottom: 10, justifyContent: 'space-around' },
  catButton: { paddingVertical: 8, paddingHorizontal: 15, borderRadius: 20, backgroundColor: '#a7cda7' },
  catSelected: { backgroundColor: '#0a5f3c' },
  catText: { color: '#064b2d', fontWeight: 'bold' },
  catTextSelected: { color: '#fff' },
  item: { padding: 15, borderRadius: 8, marginBottom: 10 },
  halal: { backgroundColor: '#d0f0c0' },
  haram: { backgroundColor: '#f0c0c0' },
  name: { fontSize: 16, fontWeight: 'bold', color: '#0a5f3c' },
  ref: { marginTop: 5, fontStyle: 'italic', color: '#333' },
});

```javascript
import React, { useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Alert } from 'react-native';

const books = [
  { id: '1', title: 'Qur’an Translation', author: 'Various', downloaded: false },
  { id: '2', title: 'Life of Prophet Muhammad', author: 'Ibn Ishaq', downloaded: false },
  { id: '3', title: 'Fiqh Basics', author: 'Scholars', downloaded: false },
];

export default function BookLibrary() {
  const [bookList, setBookList] = useState(books);

  const downloadBook = (id) => {
    // Simulate download
    Alert.alert('Download', 'Downloading book...');
    const updatedBooks = bookList.map(book => book.id === id ? { ...book, downloaded: true } : book);
    setBookList(updatedBooks);
  };

  const readBook = (book) => {
    if (!book.downloaded) {
      Alert.alert('Notice', 'Please download the book first.');
      return;
    }
    Alert.alert('Read Book', `Opening ${book.title}`);
    // Implement real reading logic or PDF viewer here
  };

  return (
    <View style={styles.container}> <Text style={styles.heading}>Book Library</Text>
      <FlatList
        data={bookList}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <View style={styles.bookItem}>
            <View>
              <Text style={styles.title}>{item.title}</Text>
              <Text style={styles.author}>by {item.author}</Text>
            </View>
            <View style={styles.buttons}>
              <TouchableOpacity
                style={[styles.button, item.downloaded ? styles.readBtn : styles.downloadBtn]}
                onPress={() => (item.downloaded ? readBook(item) : downloadBook(item.id))}
              >
                <Text style={styles.buttonText}>{item.downloaded ? 'Read' : 'Download'}</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  bookItem: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', padding: 15, backgroundColor: '#dcedd7', borderRadius: 10, marginBottom: 10 },
  title: { fontSize: 18, fontWeight: 'bold', color: '#0a5f3c' }, author: { fontSize: 14, fontStyle: 'italic', color: '#064b2d' },
  buttons: { flexDirection: 'row' },
  button: { paddingVertical: 8, paddingHorizontal: 15, borderRadius: 8 },
  downloadBtn: { backgroundColor: '#0a5f3c' },
  readBtn: { backgroundColor: '#4caf50' },
  buttonText: { color: '#fff', fontWeight: 'bold' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, Alert } from 'react-native';

// Dummy motivational items with audio URLs (replace with real files)
const motivations = [
  { id: '1', category: 'Faith', text: 'Trust in Allah’s plan.', audio: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3' },
  { id: '2', category: 'Success', text: 'Success comes with patience.', audio: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3' },
  { id: '3', category: 'Patience', text: 'Patience is key to victory.', audio: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3' },
];

export default function Motivations() {
  const [playingId, setPlayingId] = useState(null);

  const playAudio = (id) => {
    Alert.alert('Audio Playback', 'Playing audio for motivation ID: ' + id);
    setPlayingId(id);
    // Implement audio playback with Expo Audio or react-native-sound for real app
  };

  return (
    <View style={styles.container}> <Text style={styles.heading}>Daily Motivations</Text>
      <FlatList
        data={motivations}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity style={styles.item} onPress={() => playAudio(item.id)}>
            <Text style={styles.text}>{item.text}</Text>
            <Text style={styles.category}>{item.category}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 15, color: '#0a5f3c' },
  item: { backgroundColor: '#dcedd7', padding: 15, borderRadius: 10, marginBottom: 10 },
  text: { fontSize: 18, color: '#0a5f3c' },
  category: { marginTop: 5, fontStyle: 'italic', color: '#064b2d' },
});
```
```javascript
import React, { useEffect, useState } from 'react';
import { View, Text, Button, StyleSheet, ActivityIndicator } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function OfflineModeDemo() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchDataOnline = async () => {
    setLoading(true);
    // Simulate online fetch (replace with real API call)
    const fetchedData = {
      quranText: 'Surah Al-Fatiha content...',
      hadith: 'Hadith example text...',
    };
    await AsyncStorage.setItem('cachedData', JSON.stringify(fetchedData));
    setData(fetchedData);
    setLoading(false);
  };

  const loadCachedData = async () => {
    const cached = await AsyncStorage.getItem('cachedData');
    if (cached) {
      setData(JSON.parse(cached));
    }
  };

  useEffect(() => {
    loadCachedData();
  }, []);

  return (
    <View style={styles.container}> <Text style={styles.heading}>Offline Mode Demo</Text>
      {loading ? <ActivityIndicator size="large" color="#0a5f3c" /> : null}
      {data ? (
        <>
          <Text style={styles.text}>Qur’an Text: {data.quranText}</Text>
          <Text style={styles.text}>Hadith: {data.hadith}</Text>
        </>
      ) : (
        <Text>No data available offline.</Text>
      )}
      <Button title="Fetch & Cache Online Data" onPress={fetchDataOnline} color="#0a5f3c" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent:'center', alignItems:'center', padding:20, backgroundColor:'#e6f0e6' },
  heading: { fontSize:24, fontWeight:'bold', marginBottom:20, color:'#0a5f3c' },
  text: { fontSize:16, marginVertical:10, color:'#064b2d' },
});
```
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function UserProfile() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const loadProfile = async () => {
    try {
      const storedName = await AsyncStorage.getItem('userName');
      const storedEmail = await AsyncStorage.getItem('userEmail');
      if (storedName) setName(storedName);
      if (storedEmail) setEmail(storedEmail);
    } catch (e) {
      Alert.alert('Error', 'Failed to load profile.');
    }
  };

  const saveProfile = async () => {
    try {
      await AsyncStorage.setItem('userName', name);
      await AsyncStorage.setItem('userEmail', email);
      Alert.alert('Success', 'Profile saved!');
    } catch (e) {
      Alert.alert('Error', 'Failed to save profile.');
    }
  };

  useEffect(() => {
    loadProfile();
  }, []);

  return (
    <View style={styles.container}> <Text style={styles.heading}>User Profile</Text>
      <TextInput
        style={styles.input}
        placeholder="Name"
        value={name}
        onChangeText={setName}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
      />
      <Button title="Save Profile" onPress={saveProfile} color="#0a5f3c" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor: '#e6f0e6', justifyContent: 'center' },
  heading: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#0a5f3c', textAlign: 'center' },
  input: { borderWidth: 1, borderColor: '#0a5f3c', borderRadius: 8, padding: 10, marginBottom: 15, backgroundColor: '#fff' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';

const ADMIN_USERNAME = 'admin';
const ADMIN_PASSWORD = 'password123'; // Replace with secure method in real app

export default function AdminAccess() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loggedIn, setLoggedIn] = useState(false);

  const login = () => {
    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
      setLoggedIn(true);
      Alert.alert('Success', 'Logged in as Admin');
    } else {
      Alert.alert('Error', 'Invalid credentials');
    }
  };

  if (!loggedIn) {
    return (
      <View style={styles.container}>
        <Text style={styles.heading}>Admin Login</Text>
        <TextInput
          style={styles.input}
          placeholder="Username"
          value={username}
          onChangeText={setUsername}
          autoCapitalize="none"
        />
        <TextInput
          style={styles.input} placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        <Button title="Login" onPress={login} color="#0a5f3c" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Admin Dashboard</Text>
      {/* Add admin controls here */}
      <Text>Manage app content, answer questions, moderate users.</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent:'center', padding: 20, backgroundColor:'#e6f0e6' },
  heading: { fontSize:24, fontWeight:'bold', marginBottom:20, color:'#0a5f3c', textAlign:'center' },
  input: { borderWidth:1, borderColor:'#0a5f3c', borderRadius:8, padding:10, marginBottom:15, backgroundColor:'#fff' },
});
```javascript
import React, { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Localization from 'expo-localization';
import i18n from 'i18n-js';

// Set translations
i18n.translations = {
  en: { welcome: 'Welcome to The Journey to Janneh' },
  ha: { welcome: 'Barka da zuwa Tafiya zuwa Janneh' },
  ar: { welcome: 'مرحبا بكم في الرحلة إلى جنّة' },
  fr: { welcome: 'Bienvenue au Voyage vers Janneh' },
};

// Set the locale initially
i18n.locale = Localization.locale;
i18n.fallbacks = true;

export default function MultiLanguage() {
  const [locale, setLocale] = useState(i18n.locale);

  const changeLanguage = (lang) => {
    i18n.locale = lang;
    setLocale(lang);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>{i18n.t('welcome')}</Text>
      <View style={styles.buttons}>
        <Button title="English" onPress={() => changeLanguage('en')} color="#0a5f3c" />
        <Button title="Hausa" onPress={() => changeLanguage('ha')} color="#0a5f3c" /> <Button title="Arabic" onPress={() => changeLanguage('ar')} color="#0a5f3c" />
        <Button title="French" onPress={() => changeLanguage('fr')} color="#0a5f3c" />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent:'center', alignItems:'center', backgroundColor:'#e6f0e6', padding:20 },
  text: { fontSize:24, fontWeight:'bold', marginBottom:30, color:'#0a5f3c', textAlign:'center' },
  buttons: { flexDirection:'row', justifyContent:'space-around', width:'100%' },
});
```

```javascript
// App.js
import React, { createContext, useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './screens/HomeScreen';
import QuranScreen from './screens/QuranScreen';
// Import other screens as you build...

// Create Context for global state
export const AppContext = createContext();

const Stack = createStackNavigator();

export default function App() {
  const [language, setLanguage] = useState('en');
  const [userProfile, setUserProfile] = useState({});
  const [cachedData, setCachedData] = useState({});

  return (
    <AppContext.Provider
      value={{ language, setLanguage, userProfile, setUserProfile, cachedData, setCachedData }}
    >
      <NavigationContainer>
        <Stack.Navigator initialRouteName="Home">
          <Stack.Screen name="Home" component={HomeScreen} />
          <Stack.Screen name="Quran" component={QuranScreen} />
          {/* Add other screens here */}
        </Stack.Navigator>
      </NavigationContainer>
    </AppContext.Provider> );
}
```

```javascript
// screens/HomeScreen.js
import React, { useContext } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { AppContext } from '../App';

export default function HomeScreen({ navigation }) {
  const { language } = useContext(AppContext);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>The Journey to Janneh</Text>
      <Text style={styles.subtitle}>Language: {language.toUpperCase()}</Text>
      <Button title="Go to Qur'an" onPress={() => navigation.navigate('Quran')} />
      {/* Add buttons to other features */}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, justifyContent:'center', alignItems:'center', backgroundColor:'#e6f0e6', padding:20 },
  title: { fontSize:28, fontWeight:'bold', marginBottom:20, color:'#0a5f3c' },
  subtitle: { fontSize:16, marginBottom:40, color:'#064b2d' },
});
```

```javascript
// screens/QuranScreen.js
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function QuranScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Qur’an Module</Text>
      {/* Add Qur’an features here: text, audio, translation */}
    </View>
  );
} const styles = StyleSheet.create({
  container: { flex:1, justifyContent:'center', alignItems:'center', backgroundColor:'#e6f0e6', padding:20 },
  title: { fontSize:24, fontWeight:'bold', color:'#0a5f3c' },
});
```
```javascript
// screens/QuranScreen.js
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, Button, StyleSheet } from 'react-native';
import { Audio } from 'expo-av';

// Sample verse data with word-by-word translation
const verse = {
  arabic: 'بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ',
  words: [
    { word: 'بِسْمِ', translation: 'In the name' },
    { word: 'اللَّهِ', translation: 'of Allah' },
    { word: 'الرَّحْمَنِ', translation: 'the Most Gracious' },
    { word: 'الرَّحِيمِ', translation: 'the Most Merciful' },
  ],
  audioUri: 'https://www.example.com/audio/verse1.mp3', // Replace with real URL or local asset
};

export default function QuranScreen() {
  const [sound, setSound] = useState(null);
  const [playing, setPlaying] = useState(false);

  async function playAudio() {
    if (!sound) {
      const { sound: newSound } = await Audio.Sound.createAsync(
        { uri: verse.audioUri },
        { shouldPlay: true }
      );
      setSound(newSound);
      setPlaying(true); newSound.setOnPlaybackStatusUpdate((status) => {
        if (status.didJustFinish) {
          setPlaying(false);
          newSound.unloadAsync();
          setSound(null);
        }
      });
    } else {
      await sound.playAsync();
      setPlaying(true);
    }
  }

  async function pauseAudio() {
    if (sound) {
      await sound.pauseAsync();
      setPlaying(false);
    }
  }

  useEffect(() => {
    return sound
      ? () => {
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Text style={styles.arabic}>{verse.arabic}</Text>
      <FlatList
        data={verse.words}
        keyExtractor={(_, index) => index.toString()}
        horizontal
        renderItem={({ item }) => (
          <View style={styles.wordContainer}>
            <Text style={styles.word}>{item.word}</Text>
            <Text style={styles.translation}>{item.translation}</Text>
          </View>
        )}
        contentContainerStyle={{ paddingVertical: 10 }}
      />
      <View style={styles.buttons}>
        {!playing ? (
          <Button title="Play Audio" onPress={playAudio} color="#0a5f3c" />
        ) : (
          <Button title="Pause Audio" onPress={pauseAudio} color="#d14a3a" />
        )}
      </View> </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, padding: 20, backgroundColor:'#e6f0e6', justifyContent:'center', alignItems:'center' },
  arabic: { fontSize: 32, fontWeight: 'bold', textAlign: 'center', marginBottom: 20, color:'#0a5f3c' },
  wordContainer: { alignItems:'center', marginHorizontal: 8 },
  word: { fontSize: 20, fontWeight: 'bold', color:'#064b2d' },
  translation: { fontSize: 14, color: '#064b2d', marginTop: 4 },
  buttons: { marginTop: 30, width: '60%' },
});
```
```javascript
// screens/HadithScreen.js
import React, { useState } from 'react';
import { View, Text, TextInput, FlatList, TouchableOpacity, StyleSheet } from 'react-native';

// Sample Hadith data (short example)
const hadiths = [
  { id: '1', book: 'Sahih Bukhari', text: 'Actions are judged by intentions.', translation: 'الأعمال بالنيات' },
  { id: '2', book: 'Sahih Muslim', text: 'None of you truly believes until he loves for his brother what he loves for himself.', translation: 'لا يؤمن أحدكم حتى يحب لأخيه ما يحب لنفسه' },
  // Add more hadiths here or load from API/JSON
];

export default function HadithScreen() {
  const [query, setQuery] = useState('');
  const [filteredHadiths, setFilteredHadiths] = useState(hadiths);

  const searchHadith = (text) => {
    setQuery(text);
    if (text.trim() === '') {
      setFilteredHadiths(hadiths);
    } else {
      const filtered = hadiths.filter(h =>
        h.text.toLowerCase().includes(text.toLowerCase()) ||
        h.book.toLowerCase().includes(text.toLowerCase()) );
      setFilteredHadiths(filtered);
    }
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity style={styles.hadithItem}>
      <Text style={styles.book}>{item.book}</Text>
      <Text style={styles.text}>"{item.text}"</Text>
      <Text style={styles.translation}>{item.translation}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchBox}
        placeholder="Search Hadith..."
        value={query}
        onChangeText={searchHadith}
      />
      <FlatList
        data={filteredHadiths}
        keyExtractor={item => item.id}
        renderItem={renderItem}
        ListEmptyComponent={<Text style={styles.emptyText}>No Hadith found.</Text>}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex:1, backgroundColor:'#e6f0e6', padding: 20 },
  searchBox: {
    height: 40,
    borderColor: '#0a5f3c',
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 10,
    marginBottom: 15,
    backgroundColor: '#fff',
  },
  hadithItem: {
    backgroundColor: '#d4e9d4',
    padding: 15,
    borderRadius: 10,
    marginBottom: 12,
  },
  book: {
    fontWeight: 'bold',
    color: '#064b2d',
    marginBottom: 6,
  },
  text: {
    fontSize: 16, color: '#0a5f3c',
    marginBottom: 4,
  },
  translation: {
    fontStyle: 'italic',
    color: '#3a6640',
  },
  emptyText: {
    marginTop: 20,
    textAlign: 'center',
    color: '#777',
  },
});

```javascript
// screens/PrayerTimesScreen.js
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Button, Alert } from 'react-native';
import * as Location from 'expo-location';
import PrayerTimes from 'adhan'; // Use adhan npm package fo
